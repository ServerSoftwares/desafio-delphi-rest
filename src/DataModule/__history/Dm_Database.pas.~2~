unit Dm_Database;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.FMXUI.Wait, FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.Comp.UI,
  Data.DB, FireDAC.Comp.Client;

type
  TDataModule1 = class(TDataModule)
    FdConnSQLite: TFDConnection;
    FdWaitCursor: TFDGUIxWaitCursor;
    FDPhysSQLiteDriverLink: TFDPhysSQLiteDriverLink;
    procedure FdConnSQLiteAfterConnect(Sender: TObject);
    procedure FdConnSQLiteBeforeConnect(Sender: TObject);
  private
    { Private declarations }

    procedure CriarBD;
    procedure CriarTabelas;
  public
    { Public declarations }
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'FMX.Controls.TControl'}

{$R *.dfm}

procedure TDataModule1.CriarBD;
begin
  if not DirectoryExists(GetCurrentDir + '\BD' ) then
      ForceDirectories(GetCurrentDir + '\BD');

  FDConnSQLite.Params.Values['Database'] := GetCurrentDir + '\BD\Database.db';
end;

procedure TDataModule1.CriarTabelas;
var xFDQuery: TFDQuery;
begin
  xFDQuery            := TFDQuery.Create(nil);
  try
      xFDQuery.Connection := FdConnSQLite;

      xFDQuery.ExecSQL('CREATE TABLE IF NOT EXISTS ConexaoAtual (       ' +
                       '   ID	            INTEGER PRIMARY KEY IDENTITY, ' +
                       '   Cep	          VARCHAR(100) NOT NULL,        ' +
                       '   Estado	        VARCHAR(100) NOT NULL,        ' +
                       '   Cidade	            VARCHAR(100) NOT NULL,    ' +
                       '   Bairro	      VARCHAR(100) NOT NULL,          ' +
                       '   Rua	        VARCHAR(100) NOT NULL,          ' +
                       '   Servico	  VARCHAR(100) NOT NULL,            ' +
                       '   DataHoraLogin	DATETIME,                     ' +
                       ' PRIMARY KEY(Usuario),                          ' +
                       ' FOREIGN KEY(ID) REFERENCES Conexoes)           ');

  finally
      FreeAndNil(xFDQuery);
  end;
end;

procedure TDataModule1.FdConnSQLiteAfterConnect(Sender: TObject);
begin
  CriarBD;
end;

procedure TDataModule1.FdConnSQLiteBeforeConnect(Sender: TObject);
var xFDQuery: TFDQuery;
begin
  CriarTabelas;
end;

end.
