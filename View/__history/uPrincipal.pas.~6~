unit uPrincipal;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Edit, FMX.Layouts, FMX.TabControl,
  uConsultaCEP;

type
  TfrmPrincipal = class(TForm)
    rctFooter: TRectangle;
    rctTop: TRectangle;
    lblGsSmart: TLabel;
    tbcPrincipal: TTabControl;
    tbiConsulta: TTabItem;
    tbiConfig: TTabItem;
    tbiEditDados: TTabItem;
    lytRetorno: TLayout;
    stylbk1: TStyleBook;
    lytconsulta: TLayout;
    lytBusca: TLayout;
    recBusca: TRectangle;
    rectBusca: TRectangle;
    lblBusca: TLabel;
    edtCEP: TEdit;
    lblCEP: TLabel;
    lblEstado: TLabel;
    lblCidade: TLabel;
    lblBairro: TLabel;
    lblRua: TLabel;
    lblServico: TLabel;
    procedure rectBuscaClick(Sender: TObject);
    procedure ThreadTerminate(Sender: TObject);
    procedure edtCEPTyping(Sender: TObject);
    function formataCEP(obj: TObject; cep: string):string;
    function SomenteNumero(str : string) : string;
    function Mask(Mascara, Str : string) : string;
    procedure edtCEPKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure edtCEPEnter(Sender: TObject);
    procedure limparCampos;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmPrincipal: TfrmPrincipal;

implementation

{$R *.fmx}

function TfrmPrincipal.Mask(Mascara, Str : string) : string;
var
    x, p : integer;
begin
    p := 0;
    Result := '';

    if Str.IsEmpty then
        exit;

    for x := 0 to Length(Mascara) - 1 do
    begin
      if Mascara.Chars[x] = '#' then
      begin
          Result := Result + Str.Chars[p];
          inc(p);
      end
      else
          Result := Result + Mascara.Chars[x];

      if p = Length(Str) then
          break;
    end;
end;


function TfrmPrincipal.SomenteNumero(str : string) : string;
var
    x : integer;
begin
  Result := '';
  for x := 0 to Length(str) - 1 do
    if (str.Chars[x] In ['0'..'9']) then
    Result := Result + str.Chars[x];
end;

procedure TfrmPrincipal.edtCEPEnter(Sender: TObject);
begin
  limparCampos;
end;

procedure TfrmPrincipal.edtCEPKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    rectBuscaClick(self);
  end;
end;

procedure TfrmPrincipal.edtCEPTyping(Sender: TObject);
begin
  formataCEP(edtCEP, edtCEP.Text);
end;

function TfrmPrincipal.formataCEP(obj: TObject; cep: string): string;
begin
  cep := Mask('##.###-###', SomenteNumero(cep));
  if obj is TEdit then
  begin
    TEdit(obj).Text := cep;
    TEdit(obj).CaretPosition := TEdit(obj).Text.Length;
  end;
end;

procedure TfrmPrincipal.limparCampos;
begin
  edtCEP.Text    := '';
  lblCEP.Text    := 'CEP';
  lblEstado.Text := 'ESTADO';
  lblCidade.Text := 'CIDADE';
  lblBairro.Text :='BAIRRO';
  lblRua.Text    := 'RUA';
  lblServico.Text:= 'SERVIÇO';
end;

procedure TfrmPrincipal.rectBuscaClick(Sender: TObject);
var
  RetornoCEP: TRetornoCEP;
  t: TThread;
begin
  t:= t.CreateAnonymousThread(procedure
  begin
    RetornoCEP := TConsultaCEP.Consultar(edtCep.Text);

    if RetornoCEP.Consulta = 'OK' then
    begin
      t.Synchronize(t, procedure
      begin
        lblCEP.Text     := 'CEP: '   + RetornoCEP.CEP;
        lblEstado.Text  := 'ESTADO: '+ RetornoCEP.Estado;
        lblCidade.Text  := 'CIDADE: '+ RetornoCEP.Cidade;
        lblBairro.Text  := 'BAIRRO: '+ RetornoCEP.Bairro;
        lblRua.Text     := 'RUA: '   + RetornoCEP.Logradouro;
        lblServico.Text := 'SERVIÇO: ' + RetornoCEP.Service;
        ShowMessage('Busca concluída com sucesso!');
      end);
    end else
    begin
      t.Synchronize(t, procedure
      begin
        ShowMessage(RetornoCEP.Consulta);
      end);
    end;
  end);
  t.FreeOnTerminate := true;
  t.OnTerminate := ThreadTerminate;
  t.Start;
end;

procedure TfrmPrincipal.ThreadTerminate(Sender: TObject);
var
  erro : string;
begin
  if Assigned(TThread(Sender).FatalException) then
  begin
    ShowMessage('Erro na consulta' + Exception(TThread(Sender).FatalException).Message);
    exit;
  end;
end;
end.
