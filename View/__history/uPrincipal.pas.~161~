unit uPrincipal;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Edit, FMX.Layouts, FMX.TabControl,
  Data.DB, Data.Win.ADODB, System.IniFiles, Winapi.ActiveX, uDAOCEP, FMX.ListBox,
  FMX.ComboEdit, System.Rtti, FMX.Grid.Style, FMX.ScrollBox, FMX.Grid, system.StrUtils;

type
  TfrmPrincipal = class(TForm)
    rctFooter: TRectangle;
    rctTop: TRectangle;
    lblGsSmart: TLabel;
    tbcPrincipal: TTabControl;
    tbiConsulta: TTabItem;
    tbiConfig: TTabItem;
    tbiEditDados: TTabItem;
    lytRetorno: TLayout;
    stylbk1: TStyleBook;
    lytconsulta: TLayout;
    lytBusca: TLayout;
    recBusca: TRectangle;
    rectBusca: TRectangle;
    lblBusca: TLabel;
    edtCEP: TEdit;
    lblCEP: TLabel;
    lblEstado: TLabel;
    lblCidade: TLabel;
    lblBairro: TLabel;
    lblRua: TLabel;
    lblServico: TLabel;
    tbcConfig: TTabControl;
    tbiDB: TTabItem;
    tbiGeral: TTabItem;
    lytDBC: TLayout;
    edtDatabase: TEdit;
    lblDatabase: TLabel;
    lblUser: TLabel;
    lblSenha: TLabel;
    lblIP: TLabel;
    lblPorta: TLabel;
    recConectar: TRectangle;
    lblConectar: TLabel;
    edtIP: TEdit;
    edtPorta: TEdit;
    edtUser: TEdit;
    edtSenha: TEdit;
    checkConsultaAut: TCheckBox;
    lblTop: TLabel;
    edtFaixaInicial: TEdit;
    edtFaixaFinal: TEdit;
    lblFaixaIni: TLabel;
    lblFaixaFin: TLabel;
    lblTempo: TLabel;
    tmrBuscaAutomatica: TTimer;
    edtTempo: TComboEdit;
    lblAtualizacao: TLabel;
    stringGridCEP: TStringGrid;
    rctCarregaStgrid: TRectangle;
    lblStringGrid: TLabel;
    clmCep: TColumn;
    clmLogradouro: TColumn;
    StringColumn1: TStringColumn;
    columnEstado: TStringColumn;
    columnBairro: TStringColumn;
    lytTop: TLayout;
    lytBody: TLayout;
    lblFiltros: TLabel;
    lytFiltros: TLayout;
    lblUF: TLabel;
    edtUfs: TComboEdit;
    lblEndereco: TLabel;
    edtRua: TEdit;
    lytFiltros1: TLayout;
    lblUF1: TLabel;
    lblcepFaixaIni: TLabel;
    edtBuscaFaixaIni: TEdit;
    lblCepFaixaFin: TLabel;
    edtBuscaFaixaFinal: TEdit;
    lytStrGridTop: TLayout;
    rctDeletar: TRectangle;
    lblDeletar: TLabel;
    procedure ThreadTerminate(Sender: TObject);
    procedure edtCEPTyping(Sender: TObject);
    function formataCEP(obj: TObject; cep: string):string;
    function SomenteNumero(str : string) : string;
    function Mask(Mascara, Str : string) : string;
    procedure edtCEPKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure limparCampos;
    procedure ConectaBanco;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure recConectarClick(Sender: TObject);
    procedure edtIPKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure edtPortaKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure edtDatabaseKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtUserKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
    procedure edtSenhaKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure FormShow(Sender: TObject);
    procedure consultaBanco(cep:string);
    procedure consultaAPi;
    procedure rectBuscaClick(Sender: TObject);
    procedure edtCEPClick(Sender: TObject);
    procedure checkConsultaAutChange(Sender: TObject);
    procedure tmrBuscaAutomaticaTimer(Sender: TObject);
    procedure edtFaixaInicialTyping(Sender: TObject);
    procedure edtFaixaFinalTyping(Sender: TObject);
    procedure rctCarregaStgridClick(Sender: TObject);
    procedure edtUfsEnter(Sender: TObject);
    procedure edtBuscaFaixaIniTyping(Sender: TObject);
    procedure edtBuscaFaixaFinalTyping(Sender: TObject);
    function ValidarFaixaCep(FaixaCep: string): Boolean;
    procedure stringGridCEPEditingDone(Sender: TObject; const ACol,
      ARow: Integer);
    procedure stringGridCEPSelChanged(Sender: TObject);
    procedure rctDeletarClick(Sender: TObject);
    procedure edtUfsKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure edtRuaKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure edtBuscaFaixaIniKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtBuscaFaixaFinalKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
  private
    procedure SaveConnectionSettings;
    procedure LoadConnectionSettings;
    procedure ConsultaAutomatica(Cep: string);
    procedure popularStringGrid;
    { Private declarations}
  public
    { Public declarations}
    var
    cepBuscaAut: integer;
    AprocBuscaCep: Boolean;
  end;

var
  frmPrincipal: TfrmPrincipal;
  conexao: boolean;

implementation

uses
  uRetornoCep, ulog, uConsultaCep;

{$R *.fmx}

function TfrmPrincipal.Mask(Mascara, Str : string) : string;
var
    x, p : integer;
begin
  p := 0;
  Result := '';

  if Str.IsEmpty then
      exit;

  for x := 0 to Length(Mascara) - 1 do
  begin
    if Mascara.Chars[x] = '#' then
    begin
        Result := Result + Str.Chars[p];
        inc(p);
    end
    else
        Result := Result + Mascara.Chars[x];

    if p = Length(Str) then
        break;
  end;
end;

procedure TfrmPrincipal.popularStringGrid;
var
  ListaCEP: TStringList;
  i, j: Integer;
begin
  ListaCEP := TCEPCustomDAO.ListarCEP(edtRua.Text, edtUfs.Text, SomenteNumero(edtBuscaFaixaIni.Text),
                                      SomenteNumero(edtBuscaFaixaFinal.Text));
  try
    StringGridCEP.RowCount := ListaCEP.Count + 1;
    StringGridCEP.Cells[0, 0] := 'CEP';
    StringGridCEP.Cells[1, 0] := 'Logradouro';
    StringGridCEP.Cells[2, 0] := 'Bairro';
    StringGridCEP.Cells[3, 0] := 'Cidade';
    StringGridCEP.Cells[4, 0] := 'Estado';

    for i := 0 to ListaCEP.Count - 1 do
    begin
      for j := 0 to 4 do
      begin
        StringGridCEP.Cells[j, i+1] := ListaCEP[i].Split([','])[j];
      end;
    end;
  finally
    ListaCEP.Free;
  end;
end;

function TfrmPrincipal.SomenteNumero(str : string) : string;
var
    x : integer;
begin
  Result := '';
  for x := 0 to Length(str) - 1 do
    if (str.Chars[x] In ['0'..'9']) then
    Result := Result + str.Chars[x];
end;

procedure TfrmPrincipal.stringGridCEPEditingDone(Sender: TObject; const ACol,
  ARow: Integer);
var
  Col, Row: Integer;
begin
  Col := stringGridCEP.Col;
  Row := stringGridCEP.Row;
  TCEPCustomDAO.Atualizar(stringGridCEP.Cells[0, Row],   // CEP
                           stringGridCEP.Cells[1, Row],  // Logradouro
                           stringGridCEP.Cells[2, Row],  // Bairro
                           stringGridCEP.Cells[3, Row],  // Cidade
                           stringGridCEP.Cells[4, Row]); // Estado
  ShowMessage('Edição Realizada');
  stringGridCEP.SetFocus;
end;

procedure TfrmPrincipal.stringGridCEPSelChanged(Sender: TObject);
begin
  stringGridCEP.SetFocus;
end;

procedure TfrmPrincipal.checkConsultaAutChange(Sender: TObject);
begin
  if checkConsultaAut.IsChecked = True then
  begin
    if (edtTempo.Text <> '') and (edtFaixaFinal.Text <> '') and (edtFaixaInicial.Text <> '') then
    begin
      tmrBuscaAutomatica.Interval:= StrToInt(edtTempo.text) * 100000;
      tmrBuscaAutomatica.Enabled := True;
      cepBuscaAut:= StrToInt(SomenteNumero(edtFaixaInicial.Text));
    end else
    begin
      ShowMessage('Preencha o tempo de consulta, e os demais campos!');
      checkConsultaAut.IsChecked := false;
    end;
  end else
  begin
    checkConsultaAut.IsChecked := false;
  end;
end;

procedure TfrmPrincipal.ConectaBanco;
var
  daoCEP: TCEPCustomDAO;
  tabelaExistente: Boolean;
  tableNames: TArray<string>;
  tableName, errorMessage: string;
  tDb: TThread;
begin
  tDb := TThread.CreateAnonymousThread(
    procedure
    var
      localConexao: Boolean;
    begin
      try
        TThread.Synchronize(tdb,
          procedure
          begin
            conexao:= false;
            lblConectar.Text := 'CONECTAR';
            recConectar.Fill.Color:= $FFD84C4C;
            conexao:= false;
          end);
        try
          daoCEP := TCEPCustomDAO.Create('DSN=PostgreSQL35W;Server='+edtIP.Text+';Port='+edtPorta.Text+';'+
                                          'Uid='+edtUser.Text+';'+'Pwd='+edtSenha.Text+';Database='+
                                          edtDatabase.Text+';Pooling=true;', errorMessage, localConexao);
          try
            TThread.Synchronize(tdb,
              procedure
              begin
                if localConexao then
                begin
                  lblConectar.Text := 'CONECTADO';
                  recConectar.Fill.Color:= $FF4CD85E;
                  conexao:= True;
                  SaveConnectionSettings;
                  tbcPrincipal.ActiveTab:= tbiConsulta;
                  ShowMessage('Conexão com o Banco Bem Sucedida');
                end else
                begin
                  lblConectar.Text := 'CONECTAR';
                  recConectar.Fill.Color:= $FFD84C4C;
                  conexao:= false;
                end;
              end);
            tabelaExistente := False;
            tableNames := daoCEP.GetTableNames(daoCEP.FConnection, edtDatabase.Text);
            for var i := 0 to Length(tableNames) - 1 do
            begin
              tableName := tableNames[i];
              if AnsiSameText(tableName, 'tbCEP') then
              begin
                tabelaExistente := True;
                Break;
              end;
            end;
            if not tabelaExistente then
            begin
              daoCEP.FConnection.Execute('CREATE TABLE tbCEP (CEP varchar(10), Logradouro varchar(100), ' +
                              'Bairro varchar(50), Cidade varchar(50), Estado varchar(2))');
              TThread.Synchronize(tDb,
                procedure
                begin
                  ShowMessage('Tabela tbCEP criada com sucesso!');
                end);
            end;
          finally
            daoCEP.Free;
          end;
        except
          on E: ECEPConnectionException do
          begin
            TLogger.LogError(E.Message);
            TThread.Queue(nil,
              procedure
              begin
                raise ECEPConnectionException.Create(E.Message);
              end);
          end;
          on E: Exception do
          begin
            TLogger.LogError(E.Message);
            TThread.Queue(nil,
              procedure
              begin
                raise Exception.Create(E.Message);
              end);
          end;
        end;
      finally
        CoUninitialize;
      end;
    end);
  tDb.FreeOnTerminate := true;
  tDb.OnTerminate := ThreadTerminate;
  tDb.Start;
end;

procedure TfrmPrincipal.consultaAPI;
var
  t: TThread;
begin
  t := TThread.CreateAnonymousThread(
    procedure
    var
      RetornoCEP: TRetornoCEP;
    begin
      RetornoCEP := TConsultaCEP.Consultar(edtCep.Text);
      TThread.Queue(nil,
        procedure
        begin
          if RetornoCEP.Consulta = 'OK' then
          begin
            lblCEP.Text     := 'CEP: '   + RetornoCEP.CEP;
            lblEstado.Text  := 'ESTADO: '+ RetornoCEP.Estado;
            lblCidade.Text  := 'CIDADE: '+ RetornoCEP.Cidade;
            lblBairro.Text  := 'BAIRRO: '+ RetornoCEP.Bairro;
            lblRua.Text     := 'RUA: '   + RetornoCEP.Logradouro;
            lblServico.Text := 'SERVIÇO: ' + RetornoCEP.Service;
            ShowMessage('Busca concluída com sucesso!');
            try
              TCEPCustomDAO.Inserir(RetornoCEP.CEP, RetornoCEP.Logradouro,
                                     RetornoCEP.Bairro, RetornoCEP.Cidade, RetornoCEP.Estado);
            except
              on E: Exception do
              begin
                TLogger.LogError(E.Message);
                raise;
              end;
            end;
          end
          else
          begin
            TLogger.LogError(RetornoCEP.Consulta);
            ShowMessage(RetornoCEP.Consulta);
          end;
        end);
    end);
  t.FreeOnTerminate := True;
  t.OnTerminate := ThreadTerminate;
  t.Start;
end;

procedure TfrmPrincipal.ConsultaAutomatica(Cep: string);
var
  t: TThread;
  RetornoCEP: TRetornoCEP;
begin
  t := TThread.CreateAnonymousThread(procedure
  begin
    RetornoCEP := TConsultaCEP.Consultar(Cep);
    if RetornoCEP.Consulta = 'OK' then
    begin
      TThread.Synchronize(t, procedure
      begin
        TCEPCustomDAO.Atualizar(RetornoCEP.CEP, RetornoCEP.Logradouro, RetornoCEP.Bairro, RetornoCEP.Cidade, RetornoCEP.Estado);
      end);
    end else
    begin
      TLogger.LogError(RetornoCEP.Consulta);
    end;
  end);
  t.FreeOnTerminate := True;
  t.OnTerminate := ThreadTerminate;
  t.Start;
end;

procedure TfrmPrincipal.consultaBanco(cep:string);
var
  RetornoCEP: TRetornoCEP;
  t: TThread;
begin
  AprocBuscaCep:= true;
  t:= t.CreateAnonymousThread(procedure
  begin
    RetornoCEP := TCEPCustomDAO.Consultar(SomenteNumero(cep));
    if RetornoCEP.Consulta = 'OK' then
    begin
      t.Synchronize(t, procedure
      begin
        lblCEP.Text     := 'CEP: '   + RetornoCEP.CEP;
        lblEstado.Text  := 'ESTADO: '+ RetornoCEP.Estado;
        lblCidade.Text  := 'CIDADE: '+ RetornoCEP.Cidade;
        lblBairro.Text  := 'BAIRRO: '+ RetornoCEP.Bairro;
        lblRua.Text     := 'RUA: '   + RetornoCEP.Logradouro;
        lblServico.Text := 'Banco de Dados';
        ShowMessage('Busca concluída com sucesso!');
      end);
    end else
    begin
      consultaAPi;
    end;
  end);
  t.FreeOnTerminate := true;
  t.OnTerminate := ThreadTerminate;
  t.Start;
end;

procedure TfrmPrincipal.edtCEPClick(Sender: TObject);
begin
  limparCampos;
end;

procedure TfrmPrincipal.edtCEPKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    rectBuscaClick(self);
  end;
end;

procedure TfrmPrincipal.edtCEPTyping(Sender: TObject);
begin
  formataCEP(edtCEP, edtCEP.Text);
end;

procedure TfrmPrincipal.edtDatabaseKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    edtUser.SetFocus;
  end;
end;

procedure TfrmPrincipal.edtFaixaFinalTyping(Sender: TObject);
begin
  formataCEP(edtFaixaFinal, edtFaixaFinal.Text);
end;

procedure TfrmPrincipal.edtFaixaInicialTyping(Sender: TObject);
begin
  formataCEP(edtFaixainicial, edtFaixaInicial.Text);
end;

procedure TfrmPrincipal.edtIPKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    edtPorta.SetFocus;
  end;
end;

procedure TfrmPrincipal.edtPortaKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    edtDatabase.SetFocus;
  end;
end;

procedure TfrmPrincipal.edtRuaKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    edtBuscaFaixaIni.SetFocus;
  end;
end;

procedure TfrmPrincipal.edtBuscaFaixaFinalKeyDown(Sender: TObject;
  var Key: Word; var KeyChar: Char; Shift: TShiftState);
begin
  rctCarregaStgridClick(self);
end;

procedure TfrmPrincipal.edtBuscaFaixaFinalTyping(Sender: TObject);
begin
  formataCEP(edtBuscaFaixaFinal, edtBuscaFaixaFinal.Text);
end;

procedure TfrmPrincipal.edtBuscaFaixaIniKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    edtBuscaFaixaFinal.SetFocus;
  end;
end;

procedure TfrmPrincipal.edtBuscaFaixaIniTyping(Sender: TObject);
begin
  formataCEP(edtBuscaFaixaIni, edtBuscaFaixaIni.Text);
end;

procedure TfrmPrincipal.edtSenhaKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    recConectarClick(self);
  end;
end;

procedure TfrmPrincipal.edtUfsEnter(Sender: TObject);
var
  listaUfs: TStringList;
  i: Integer;
begin
  listaufs := TCEPCustomDAO.ListarUfs;
  edtUfs.Items.Clear;
  for i := 0 to listaUfs.Count - 1 do
    edtUfs.Items.Add(listaUfs[i]);
end;

procedure TfrmPrincipal.edtUfsKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    edtRua.SetFocus;
  end;
end;

procedure TfrmPrincipal.edtUserKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    edtSenha.SetFocus;
  end;
end;

function TfrmPrincipal.formataCEP(obj: TObject; cep: string): string;
begin
  cep := Mask('##.###-###', SomenteNumero(cep));
  if obj is TEdit then
  begin
    TEdit(obj).Text := cep;
    TEdit(obj).CaretPosition := TEdit(obj).Text.Length;
  end;
end;

procedure TfrmPrincipal.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveConnectionSettings;
end;

procedure TfrmPrincipal.FormCreate(Sender: TObject);
begin
  AprocBuscaCep := false;
  LoadConnectionSettings;
end;

procedure TfrmPrincipal.FormShow(Sender: TObject);
begin
  if conexao = false then
  begin
    tbcConfig.ActiveTab:= tbiDB;
    tbcPrincipal.ActiveTab:= tbiConfig;
  end else
  begin
    tbcConfig.ActiveTab:= tbiDB;
  end;
end;

procedure TfrmPrincipal.limparCampos;
begin
  edtCEP.Text    := '';
  lblCEP.Text    := 'CEP';
  lblEstado.Text := 'ESTADO';
  lblCidade.Text := 'CIDADE';
  lblBairro.Text :='BAIRRO';
  lblRua.Text    := 'RUA';
  lblServico.Text:= 'SERVIÇO';
  edtcep.SetFocus;
end;

procedure TfrmPrincipal.rctCarregaStgridClick(Sender: TObject);
begin
  if (ValidarFaixaCep(edtBuscaFaixaIni.Text) = true) and (ValidarFaixaCep(edtBuscaFaixaFinal.Text) = true) then
  begin
    popularStringGrid;
    end else
  begin
    ShowMessage('Preencha corretamente as faixas de cep');
    exit;
  end;
end;

procedure TfrmPrincipal.rctDeletarClick(Sender: TObject);
var
  SelectedRow: Integer;
  Cep: string;
begin
  SelectedRow := stringGridCEP.Row;
  if SelectedRow > 0 then
  begin
    Cep := stringGridCEP.Cells[0, SelectedRow];
    TCEPCustomDAO.Deletar(Cep);
    rctCarregaStgridClick(self);
  end;
end;

procedure TfrmPrincipal.recConectarClick(Sender: TObject);
begin
  ConectaBanco;
end;

procedure TfrmPrincipal.rectBuscaClick(Sender: TObject);
begin
  if AprocBuscaCep = false then
  begin
    if Length(edtcep.Text) >= 10 then
    begin
      consultaBanco(edtCEP.Text);
    end else
    begin
      ShowMessage('Preencha corretamente o Cep');
    end;
  end else
  begin
    TThread.CurrentThread.Synchronize(TThread.CurrentThread, procedure
    begin
      ShowMessage('Busca já está em andamento');
    end);
  end;
end;

procedure TfrmPrincipal.ThreadTerminate(Sender: TObject);
var
  erro : string;
begin
  AprocBuscaCep:= false;
  if Assigned(TThread(Sender).FatalException) then
  begin
    ShowMessage('Erro na consulta' + Exception(TThread(Sender).FatalException).Message);
    exit;
  end;
end;

procedure TfrmPrincipal.tmrBuscaAutomaticaTimer(Sender: TObject);
begin
  ConsultaAutomatica(IntToStr(cepBuscaAut));
end;

function TfrmPrincipal.ValidarFaixaCep(FaixaCep: string): Boolean;
begin
  Result := False;
  if Length(FaixaCep) >=1 then
  begin
    if Length(FaixaCep) =10 then
    begin
      Result:= True;
    end else
    begin
      Result:= false;
    end;
  end else
  begin
    Result:= true;
  end;
end;

procedure TfrmPrincipal.SaveConnectionSettings;
var
  iniFile: TIniFile;
  exePath: string;
begin
  exePath := ExtractFilePath(ParamStr(0));
  iniFile := TIniFile.Create(exePath + 'config.ini');
  try
    iniFile.WriteString('Connection', 'Server', edtIP.Text);
    iniFile.WriteInteger('Connection', 'Port', StrToIntDef(edtPorta.Text, 0));
    iniFile.WriteString('Connection', 'Database', edtDatabase.Text);
    iniFile.WriteString('Connection', 'User', edtUser.Text);
    iniFile.WriteString('Connection', 'Password', edtSenha.Text);
  finally
    iniFile.Free;
  end;
end;

procedure TfrmPrincipal.LoadConnectionSettings;
var
  iniFile: TIniFile;
  filePath: string;
begin
  filePath := ExtractFilePath(ParamStr(0)) + 'config.ini';
  if not FileExists(filePath) then
  begin
    conexao:= false;
    exit
  end else
  begin
    iniFile := TIniFile.Create(filePath);
    try
      edtIP.Text := iniFile.ReadString('Connection', 'Server', '');
      edtPorta.Text := IntToStr(iniFile.ReadInteger('Connection', 'Port', 0));
      edtDatabase.Text := iniFile.ReadString('Connection', 'Database', '');
      edtUser.Text := iniFile.ReadString('Connection', 'User', '');
      edtSenha.Text := iniFile.ReadString('Connection', 'Password', '');
    finally
      iniFile.Free;
      ConectaBanco;
    end;
  end;
end;
end.
