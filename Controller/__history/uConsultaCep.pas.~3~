unit TConsultaCEP;

interface

uses
  System.SysUtils, System.Classes, System.Net.HttpClient, System.Net.URLClient,
  System.Net.HttpClientComponent;

type
  TConsultaCEP = class(TComponent)
  private
    FCEP: string;
    FOnCEPReceived: TNotifyEvent;
    FOnError: TNotifyEvent;
    FHttpClient: TNetHTTPClient;
    procedure HandleResponse(const Sender: TObject; const AResponse: IHTTPResponse);
    procedure HandleError(const Sender: TObject; E: Exception);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Consultar;
    property CEP: string read FCEP write FCEP;
    property OnCEPReceived: TNotifyEvent read FOnCEPReceived write FOnCEPReceived;
    property OnError: TNotifyEvent read FOnError write FOnError;
  end;

implementation

constructor TConsultaCEP.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FHttpClient := TNetHTTPClient.Create(nil);
end;

destructor TConsultaCEP.Destroy;
begin
  FHttpClient.Free;
  inherited Destroy;
end;

procedure TConsultaCEP.Consultar;
var
  Url: string;
begin
  Url := 'https://viacep.com.br/ws/' + FCEP + '/json/';
  FHttpClient.Get(Url, HandleResponse, HandleError);
end;

procedure TConsultaCEP.HandleResponse(const Sender: TObject; const AResponse: IHTTPResponse);
var
  ResponseString: string;
begin
  if AResponse.StatusCode = 200 then
  begin
    ResponseString := AResponse.ContentAsString;
    // Processar a resposta aqui
    if Assigned(FOnCEPReceived) then
      FOnCEPReceived(Self);
  end
  else
  begin
    // Erro no servidor remoto
    if Assigned(FOnError) then
      FOnError(Self);
  end;
end;

procedure TConsultaCEP.HandleError(const Sender: TObject; E: Exception);
begin
  // Erro na conexão
  if Assigned(FOnError) then
    FOnError(Self);
end;

end.

