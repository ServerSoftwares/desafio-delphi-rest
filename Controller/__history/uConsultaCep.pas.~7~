unit uConsultaCEP;

interface

  uses
    System.Net.HttpClient, System.Net.URLClient,system.Net.HttpClientComponent,
    system.SysUtils, System.JSON, System.Classes;


 type
  TRetornoCEP = class
  private
    FLogradouro: string;
    FBairro: string;
    FCidade: string;
    FEstado: string;
    FCEP: string;
    FService: string;

  public
    property Logradouro: string read FLogradouro write FLogradouro;
    property Bairro: string read FBairro write FBairro;
    property Cidade: string read FCidade write FCidade;
    property Estado: string read FEstado write FEstado;
    property CEP: string read FCEP write FCEP;
    property Service: string read FSERVICE write FService;
  end;

  TConsultaCEP = class
  public
    class function Consultar(const CEP: string): TRetornoCEP;
  end;

implementation

class function TConsultaCEP.Consultar(const CEP: string): TRetornoCEP;
const
  url = 'https://brasilapi.com.br/api/cep/v1/';
var
  client: TNetHTTPClient;
  response: IHTTPResponse;
  json: TJSONObject;
begin
  client := TNetHTTPClient.Create(nil);
  try
    client.ConnectionTimeout := 5000;
    response := client.Get(url+cep);

    if response.StatusCode = 200 then
    begin
      json := TJSONObject.ParseJSONValue(response.ContentAsString) as TJSONObject;
      Result := TRetornoCEP.Create;
      try
        Result.CEP := json.GetValue('cep').Value;
        Result.Logradouro := json.GetValue('street').Value;
        Result.Bairro := json.GetValue('neighborhood').Value;
        Result.Cidade := json.GetValue('city').Value;
        Result.Estado := json.GetValue('state').Value;
        Result.Service:= json.GetValue('service').Value;
      except
        Result.Free;
        raise;
      end;
    end
    else
      raise Exception.CreateFmt('Status code: %d', [response.StatusCode]);
  except
    on E: ENetHTTPClientException do
    raise Exception.Create('Serviço de CEP está indisponível no momento, tente novamente mais tarde.');
  end;
  client.Free;
end;

end.
